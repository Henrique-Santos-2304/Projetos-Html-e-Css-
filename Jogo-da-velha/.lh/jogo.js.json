{
    "sourceFile": "jogo.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1630357221975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1630357221975,
            "name": "Commit-0",
            "content": "const table = {\n  a1: \"\",\n  a2: \"\",\n  a3: \"\",\n  b1: \"\",\n  b2: \"\",\n  b3: \"\",\n  c1: \"\",\n  c2: \"\",\n  c3: \"\",\n};\n\nconst displayLogin = document.querySelector(\".login\");\nconst displayGame = document.querySelector(\".container\");\n\nconst txtLogin = document.querySelector(\"p\");\nconst txtGame = document.querySelector(\"h1\");\nconst txtGame2 = document.querySelector(\"h2\");\nconst txtGame3 = document.querySelector(\"h3\");\n\nconst j1 = document.querySelector(\"#j1\");\nconst j2 = document.querySelector(\"#j2\");\n\ndisplayGame.style.display = \"none\";\ntxtGame2.style.display = \"none\";\ntxtGame3.style.display = \"none\";\n\nconst bt01 = document.querySelector(\"#bt-01\");\nbt01.onclick = fazLogin;\n\n//Função que verifica se os campos Jogador 1 e jogador 2 foram preenchidos e chama o inicio do jogo\n\nfunction fazLogin(e) {\n  e.preventDefault();\n  if (j1.value.length + j2.value.length == 0) {\n    txtLogin.innerHTML = \"Campos 1 e 2 Vazios\";\n  } else if (j1.value.length === 0) {\n    txtLogin.innerHTML = \"Campo 1 vazio\";\n  } else if (j2.value.length === 0) {\n    txtLogin.innerHTML = \"Campo 2 vazio\";\n  } else {\n    txtLogin.innerHTML = \"Dados Inseridos com sucesso\";\n    setTimeout(() => {\n      displayLogin.style.display = \"none\";\n      displayGame.style.display = \"flex\";\n      goHash(\"j1\", j1);\n    }, 1000);\n  }\n}\n\n//Função de inicio do game seta o nome de jogador e tb seta o texto da vez de cada jogar, mostra na tela no jogo,\n//e pega o evento de click de usuario chamando a função que insere na tabela\n\nfunction goHash(play, idPlayer) {\n  this.idPlayer = idPlayer.value;\n  this.play = play;\n  txtGame.innerHTML = `${this.idPlayer} Joga`;\n\n  const plays = document.querySelectorAll(\"[chama-imagem]\");\n  plays.forEach((e) => (e.onclick = insertTable));\n}\n\n/* Função que verifica se a jogada é válida e insere no Objeto table a plays do usuario, depois chama função que checa\nse usuario venceu e chama afunção de inserção de imagem  */\n\nconst insertTable = (e) => {\n  const item = e.target.getAttribute(\"id\");\n  if (table[item] != \"\") {\n    txtGame.innerHTML = \"Jogada Inválida\";\n  } else {\n    if (this.play == \"j1\") {\n      table[item] = \"O\";\n      newtable(\"O\");\n    } else {\n      table[item] = \"X\";\n      newtable(\"X\");\n    }\n    showImage(e);\n  }\n};\n\n/*  Função que armazena e atualiza os dados do array para checar condição de vitória\ne chama a função que verifica  */\n\nfunction newtable(check) {\n  this.victory = [\n    [table[\"a1\"], table[\"a2\"], table[\"a3\"]],\n    [table[\"b1\"], table[\"b2\"], table[\"b3\"]],\n    [table[\"c1\"], table[\"c2\"], table[\"c3\"]],\n    [table[\"a1\"], table[\"b1\"], table[\"c1\"]],\n    [table[\"a2\"], table[\"b2\"], table[\"c2\"]],\n    [table[\"a3\"], table[\"b3\"], table[\"c3\"]],\n    [table[\"a1\"], table[\"b2\"], table[\"c3\"]],\n    [table[\"a3\"], table[\"b2\"], table[\"c1\"]],\n  ];\n  checkWins(check);\n}\n\n//  Função insere bolinha e X insere as imagens ns locais de cada jogada e chama próximo jogador\n\nfunction showImage(e) {\n  const item = e.target;\n  item.getAttribute(\"id\");\n\n  if (this.play == \"j1\") {\n    const newDiv = document.createElement(\"div\");\n    newDiv.classList.add(\"bolinha\");\n    item.appendChild(newDiv);\n    goHash(\"j2\", j2);\n  } else {\n    const newImage = document.createElement(\"img\");\n    newImage.src = \"./x-01.jpg\";\n    item.appendChild(newImage);\n    goHash(\"j1\", j1);\n  }\n}\n\n/* Função que checa se existe um vencedor de acordo com a lista victory que contém as condições de vitória,\ncaso não haja checa se há empate, caso não haja nem um nem outro continua o jogo   */\n\nfunction checkWins(check, vict = false) {\n  const winner = document.querySelector(\".velha-img\");\n  const draw = [];\n  const equal = (item) => item == check;\n  for (value in table) {\n    if (table[value] != \"\") {\n      draw.push(table.draw);\n    }\n  }\n  this.victory.forEach((list) => {\n    if (list.every(equal)) {\n      vict = true;\n    }\n  });\n\n  if (vict) {\n    winner.style.display = \"none\";\n    txtGame.style.display = \"none\";\n    showWinner();\n  } else if (draw.length == 9) {\n    winner.style.display = \"none\";\n    txtGame.style.display = \"none\";\n    showWinner(\"a tie\");\n  }\n}\n\n/* Função chamado quando houve um vencedor, e tem como objetivo esconder o display de jogadas de jogadores\nsetar um novo h1 e inserir o texto do vencedor na       */\nfunction showWinner(msg) {\n  if (msg == \"a tie\") {\n    txtGame3.innerHTML = \"Xii Deu Velha\";\n    txtGame3.style.display = \"block\";\n    txtGame2.style.display = \"block\";\n  } else {\n    txtGame3.innerHTML = `${this.idPlayer} Venceu `;\n    txtGame3.style.display = \"block\";\n    txtGame2.style.display = \"block\";\n  }\n}\n"
        }
    ]
}